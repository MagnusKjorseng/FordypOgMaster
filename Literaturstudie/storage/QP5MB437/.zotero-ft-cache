10
Guidance Systems
This chapter describes methods for the design of guidance systems for marine craft (Siouris, 2004, Yanushevsky, 2008). Guidance can be defined as (Shneydor, 1998): “The process for guiding the path of an object towards a given point, which in general may be moving.” Draper (1971) states: “Guidance depends upon fundamental principles and involves devices that are similar for vehicles moving on land, on water, under water, in air, beyond the atmosphere within the gravitational field of Earth and in space outside this field.” Thus, guidance represents a basic methodology concerned with the transient motion behavior associated with the achievement of motion control objectives (see Breivik and Fossen, 2009). In its simplest form, open-loop guidance systems for marine craft are used to generate a reference trajectory for time-varying trajectory tracking or, alternatively, a path for time-invariant path following (see Section 9.2). A motion control system will work in close interaction with the guidance system. In the control literature, the different motion control scenarios are typically classified according to:
• Setpoint regulation (point stabilization) is a special case where the desired position and attitude are chosen to be constant. • Trajectory tracking, where the objective is to force the system output y(t) ∈ Rm to track a desired output yd(t) ∈ Rm. The desired trajectory can be computed using reference models generated by low-pass filters, optimization methods or by simply simulating the marine craft motion using an adequate model of the craft. Feasible trajectories can be generated in the presence of both spatial and temporal constraints.
• Path following is following a predefined path independent of time. No restrictions are placed on the temporal propagation along the path. Spatial constraints can, however, be added to represent obstacles and other positional constraints if they are known in advance.
Tracking control systems can also be designed for target tracking and path tracking. For instance, a target-tracking system tracks the motion of a target that is either stationary (analogous to point stabilization) or that moves such that only its instantaneous motion is known; that is no information about the future target motion is available (Breivik and Fossen, 2009). As shown in Figure 10.1, the guidance system can use joystick or keyboard inputs, external inputs (weather data, for instance measured wind, wave and current speeds and directions), Earth topological information (digital chart, radar and sonar data), obstacle and collision avoidance data, and finally the state vector, which is available as output from the navigation and sensor systems. The required data are further processed to generate a feasible trajectory for motion control. This can be done using ad hoc techniques or sophisticated methods such as interpolation techniques, dynamic optimization or filtering
Handbook of Marine Craft Hydrodynamics and Motion Control, First Edition. Thor I. Fossen.
© 2011 John Wiley & Sons Ltd. Published 2011 by John Wiley & Sons Ltd. ISBN: 978-1-119-99149-6


242 Guidance Systems
Figure 10.1 In closed-loop guidance (dotted line) the states are fed back to the guidance system while open-loop guidance only uses sensor and reference signal inputs.
techniques. A feasible trajectory means one that is consistent with the craft dynamics. For a linear system, this implies that the eigenvalues of the desired states must be chosen such that the reference model is slower than the craft dynamics. For a ship or an underwater vehicle, the guidance and control system usually consists of the following subsystems:
• Attitude control system • Path-following control system
In its simplest form, the attitude control system is a heading autopilot, while roll and pitch are regulated to zero or left uncontrolled. The main function of the attitude feedback control system is to maintain the craft in a desired attitude on the ordered path by controlling the craft in roll, pitch and yaw. The task of the path-following controller is to keep the craft on the predescribed path with some predefined dynamics, for instance a speed control system by generating orders to the attitude control system. For surface vessels it is common to use a heading controller in combination with a speed controller while aircraft and underwater vehicles also need a height/depth controller. The principles and definitions of guidance, navigation and control are further outlined in Section 9.2.
10.1 Target Tracking
Sometimes no information about the path is known in advance and there is no trajectory to track. Hence, if the goal is to track a moving object, for which no future motion information is available, target-tracking methods can be applied. Guidance laws for target tracking can be used in marine operations such as underway replenishment (UNREP) operations and formation control. UNREP operations involve cargo transfer between two or more cooperating craft in transit. The task of the so-called guide ship is to maintain a steady course and speed while the approach ship moves up alongside the guide or target ship to receive fuel, munitions and personnel (Skejic et al., 2009). For surface vessels, the 2-D position of the target is denoted by pn
t = [Nt, Et] . The control objective of a target-tracking scenario can be formulated as (Breivik and Fossen, 2009)
lim
t→∞[pn(t) − pn
t (t)] = 0 (10.1)


Target Tracking 243
Figure 10.2 Desired interceptor approach speed Ud = ‖vn
d‖ for the classical guidance principles: lineof-sight LOS, pure pursuit (PP) and constant bearing (CB). The target speed is Ut = ‖vn
t ‖.
where pn ∈ R2 is the craft position. The target velocity is vn
t =  ̇pn
t ∈ R2. In the missile guidance community an object that is supposed to destroy another object is referred to as a missile, an interceptor or a pursuer. Conversely, the threatened object is typically called a target or an evader. In the following, the designations interceptor and target will be used. An interceptor typically undergoes three phases during its operation:
1. Launch phase 2. Midcourse phase 3. Terminal phase
The greatest accuracy demand is associated with the terminal phase, where the interceptor guidance system must compensate for the accumulated errors from the previous phases to achieve a smallest possible final miss distance to the target. The remainder of this section is based on Breivik and Fossen (2009) and Breivik (2010). The discussion is limited to three terminal guidance strategies, line-of-sight, pure pursuit and constant bearing, which are illustrated in Figure 10.2. Note that while the main objective of a guided missile is to hit and destroy a physical target in finite time. the analogy is to hit or converge to a virtual target asymptotically. This is also referred to as asymptotic interception given by (10.1).
10.1.1 Line-of-Sight Guidance
Line-of-sight (LOS) guidance is classified as a three-point guidance scheme since it involves a typically stationary reference point in addition to the interceptor and the target. The LOS denotation stems from the fact that the interceptor is supposed to achieve an intercept by constraining its motion along the LOS vector between the reference point and the target. LOS guidance has typically been employed for surfaceto-air missiles, often mechanized by a ground station, which illuminates the target with a beam that the guided missile is supposed to ride, also known as beam-rider guidance. The LOS guidance principle is illustrated in Figure 10.2, where the interceptor velocity vn
a is pointed to LOS vector to obtain the desired velocity vn
d. LOS guidance will be applied to track straight-line paths in section 10.3 while curved paths are discussed in Section 10.4.


244 Guidance Systems
10.1.2 Pure Pursuit Guidance
Pure pursuit (PP) guidance belongs to the two-point guidance schemes, where only the interceptor and the target are considered in the engagement geometry. The interceptor aligns its velocity vn
a along the LOS vector between the interceptor and the target by choosing the desired velocity as
vn
d = −κ  ̃pn
‖  ̃pn‖ (10.2)
where κ > 0. This strategy is equivalent to a predator chasing a prey in the animal world, and very often results in a tail chase. PP guidance has typically been employed for air-to-surface missiles. The PP guidance principle is represented in Figure 10.2 by a vector pointing directly at the target. Deviated pursuit guidance is a variant of PP guidance, where the velocity of the interceptor is supposed to lead the interceptor–target line of sight by a constant angle in the direction of the target movement. An equivalent term is fixed-lead navigation.
10.1.3 Constant Bearing Guidance
Constant bearing (CB) guidance is also a two-point guidance scheme, with the same engagement geometry as PP guidance. However, in a CB engagement, the interceptor is supposed to align the interceptortarget velocity vn
a along the LOS vector between the interceptor and the target. This goal is equivalent to reducing the LOS rotation rate to zero such that the interceptor perceives the target at a constant bearing, closing in on a direct collision course. CB guidance is often referred to as parallel navigation and has typically been employed for air-to-air missiles. Also, the CB rule has been used for centuries by mariners to avoid collisions at sea, steering away from a situation where another craft approaches at a constant bearing. Thus, guidance principles can just as well be applied to avoid collisions as to achieve them. The CB guidance principle is indicated in Figure 10.2. The most common method of implementing CB guidance is to make the rotation rate of the interceptor velocity directly proportional to the rotation rate of the interceptor–target LOS, which is widely known as proportional navigation (PN). However, CB guidance can also be implemented through the direct velocity assignment as proposed by Breivik et al. (2006); see Breivik (2010) for details. The CB desired velocity is given by
vn
d = vn
t + vn
a (10.3)
vn
a = −κ  ̃pn
‖  ̃pn‖ (10.4)
where vn
a = [N ̇ a, E ̇ a] is the approach velocity vector specified such that the desired approach speed
Ua = ∥∥vn
a
∥∥ is tangential to the LOS vector as shown in Figure 10.2 and
 ̃pn := pn − pn
t (10.5)
is the LOS vector between the interceptor and the target, ‖  ̃pn‖ ≥ 0 is the Euclidean length of this vector and
κ = Ua,max
‖  ̃pn‖
√
(  ̃pn)  ̃pn + 2
 ̃p
(10.6)


Target Tracking 245
where Ua,max specifies the maximum approach speed toward the target and  ̃p > 0 affects the transient interceptor–target rendezvous behavior. The CB guidance law (10.3) computes the velocity commands needed to track the target. Note that CB guidance becomes equal to PP guidance for a stationary target; that is the basic difference between the two guidance schemes is whether the target velocity is used as a kinematic feedforward or not.
Convergence and Stability Analyses
The convergence properties of (10.3)–(10.4) and (10.6) can be investigated by considering a Lyapunov function candidate (LFC):
V=1
2 (  ̃pn)  ̃pn > 0, ∀  ̃pn =/ 0 (10.7)
Time differentiation of V along the trajectories of  ̃pn gives
V ̇ = (  ̃pn) v ̃n
= −κ (  ̃pn)  ̃pn
‖  ̃pn‖
= −Ua,max
(  ̃pn)  ̃pn
√
(  ̃pn)  ̃pn + 2
p ̃
< 0, ∀  ̃pn =/ 0 (10.8)
The LFC (10.7) is positive definite and radially unbounded, while its derivative with respect to time (10.8) is negative definite when adhering to U ≥ Ua,max > 0. Hence, by standard Lyapunov arguments the origin  ̃pn = 0 is UGAS (see Appendix A.1). Finally, the Jacobian of the error dynamics  ̃pn at the origin  ̃pn = 0 has strictly negative eigenvalues, which proves ULES.
Example 10.1 (UNREP Operation)
For ships equipped with a rudder and a main propeller, the rudder can be used to obtain a parallel course with the guide ship (lateral alignment). We will consider a guide ship moving on a straight line and the goal for the second ship is to approach this ship to carry out a UNREP operation. In Skejic et al. (2009) the lookahead-based steering law of Breivik and Fossen (2009) in Section 10.3 is used to ensure that the approach ship is able to assume a parallel course with the guide ship by adhering to the desired course angle
χd = χt + χr (10.9)
where χt is the course angle of the guide ship. The heading of the approach ship is adjusted using the steering law χr such that the lateral distance is adjusted as desired. The lateral distance and cross-track error (s, e) are obtained by the following transformation:
[s
e
] =
[ sd
ed
]
+ Rp(χt) (pn − pn
t ) (10.10)
where sd = 0 (interceptor on parallel course), ed = constant (distance between interceptor and target) and
Rp(χt) =
[ cos(χt) − sin(χt)
sin(χt) cos(χt)
]
∈ SO(2) (10.11)


246 Guidance Systems
Hence, the LOS steering law can be chosen as
χr = arctan(−e/ e) (10.12)
where the steering law tuning parameter e > 0 represents the lookahead distance. This parameter is given in meters and usually takes values between 1.5 and 2.5 of a ship length Lpp. Finally, the desired heading angle for the approaching ship is input to the ship autopilot, suggesting that
ψd = χd − β (10.13)
where the sideslip (drift) angle is
β = arcsin
(v
U
)
(10.14)
The speed command Ud = √
u2
d + v2
d ≈ ud (assuming that ud vd) is computed according to (10.3), (10.4) and (10.6) such that
Ud = Ut − κ s
√s2 + s2
(10.15)
where κ = Ua,max and
Ut = √
ut2 + vt2 (10.16)
The speed tuning parameter s > 0 specifies the rendezvous behavior towards the projection of the guide ship on to the parallel course defined by ed, ensuring that the approach ship smoothly ramps down its total speed to Ut as the along-course distance goes to zero.
10.2 Trajectory Tracking
Guidance systems designed for tracking a smooth time-varying trajectory yd(t) ∈ Rm are useful in many applications. The desired speed and acceleration are obtained from time-differentiation of yd(t) one and two times, respectively. This means that the signal yd(t) defines the desired position/attitude, velocity and acceleration as a function of time t for a moving craft in 6 DOF. We will make use of the following definition in the forthcoming:
Definition 10.1 (Trajectory Tracking)
A control system that forces the system output y(t) ∈ Rm to track a desired output yd(t) ∈ Rm solves a trajectory tracking problem.
This definition is consistent with Athans and Falb (1966) and later with Hauser and Hindmann (1995), Ortega et al. (1998), Encarnacao and Pascoal (2001) and Skjetne et al. (2002, 2004). In this section, methods for computation of the desired trajectory corresponding to a desired virtual target will be presented. The following methods are discussed:
• Low-pass filters for the generation of position, velocity and acceleration (PVA) trajectories • Time-domain simulation using an adequate model of the craft • Optimization methods


Trajectory Tracking 247
Within this framework, it is possible to generate feasible trajectories incorporating both spatial constraints (obstacle avoidance and maximum velocity/acceleration) and temporal constraints (minimum time, on time and maximum time problems)
Trajectory-Tracking Control
Trajectory-tracking control laws are classified according to the number of available actuators. This can be illustrated by considering a marine craft in surge, sway and yaw. Tracking of a timevarying reference trajectory ηd(t) = [Nd(t), Ed(t), ψd(t)] is achieved by minimizing the tracking error, e(t) := η(t) − ηd(t). Moreover,
e(t) :=
⎡
⎣
N(t) − Nd(t)
E(t) − Ed(t)
ψ(t) − ψd(t)
⎤
⎦ (10.17)
Based on this interpretation, the following considerations can be made (see Section 9.3):
• Three or more controls: This is referred to as a fully actuated dynamic positioning (DP) system and typical applications are crab wise motions (low-speed maneuvering) and stationkeeping, where the goal is to drive e(t) ∈ R2 × S → 0. This is the standard configuration for offshore DP vessels. Feedback control laws for fully actuated vessels are discussed in Chapter 12.
• Two controls and trajectory-tracking control: Trajectory tracking in 3 DOF, e(t) ∈ R2 × S, with only two controls, u(t) ∈ R2, is an underactuated control problem, which cannot be solved using linear theory. This problem has limited practical use. However, since all marine craft operate in a uniform force field due to mean wind, waves and ocean currents, it is possible to steer the craft along a path with a constant sideslip angle (given by the mean environmental force field) using only two controls, that is turning and forward speed control. This is the classical approach used in path-following control (see Section 12.2.8). • Two controls and weather-optimal heading: If the ship is aligned up against the mean resulting force due to wind, waves and ocean currents, a weathervaning controller can be designed such that only two controls, u(t) ∈ R2, are needed to stabilize the ship positions. In this approach the heading angle is allowed to vary automatically with the mean environmental forces (Pinkster, 1971, Pinkster and Nienhuis, 1986, Fossen and Strand, 2001) (see Section 13.3.10). • Two controls and path-following control: It is standard procedure to define a 2-D workspace (alongtrack and cross-track errors) and minimize the cross-track error by means of an LOS path-following controller; see Sections 10.3–10.4 and 12.2.8–12.2.9. Hence, it is possible to follow a path by using only two controls (surge speed and yaw moment). For a conventional ship this is achieved by using a rudder and a propeller only. Since the input and output vectors are of dimension two, the 6 DOF system model must be internally stable. • One control: It is impossible to design stationkeeping systems and trajectory-tracking control systems in 3 DOF for a marine craft using only one control.
For underwater vehicles operating in 6 DOF it is also important to control the heave and sometimes the pitch-roll motions in addition to the surge, sway and yaw motions. However, roll and pitch can be left uncontrolled for metacentrically stable vehicles. For operation in 6 DOF, a fully actuated vehicle must have six or more actuators producing independent forces and moments in all directions in order to track a 6 DOF time-varying reference trajectory.


248 Guidance Systems
Figure 10.3 Joystick control system used to generate reference signals. Illustration by Bjarne Stenberg/SINTEF.
10.2.1 Reference Models for Trajectory Generation
In a practical system, it is highly advantageous to keep the software as simple as possible. As a result of this, many industrial systems are designed using linear reference models for trajectory generation. This corresponds to open-loop guidance as described in Section 9.2 since no feedback from the states is required. The simplest form of a reference model is obtained by using a low-pass (LP) filter structure:
xd
r (s) = hlp(s) (10.18)
where xd is the desired state and r denotes the reference signal usually specified by an operator (see Figure 10.3). The choice of filter should reflect the dynamics of the craft such that a feasible trajectory is constructed. For instance, it is important to take into account physical speed and acceleration limitations of the craft as well as input saturation. This is a nontrivial task so a compromise between performance and accurate tracking must be made by tuning the bandwidth of the reference model. It is important that the bandwidth of the reference model is chosen lower than the bandwidth of the motion control system in order to obtain satisfactory tracking performance and stability. A frequently used method to generate a smooth reference trajectory xd ∈ Rn for tracking control is to use a physically motivated model. For marine craft it is convenient to use reference models


Trajectory Tracking 249
motivated by the dynamics of mass–damper–spring systems to generate the desired state trajectories, for instance
hlp(s) = ω2
ni
s2 + 2ζiωni s + ωn2i
(10.19)
where ζi (i = 1, . . . , n) are the relative damping ratios and ωni (i = 1, . . . , n) are the natural frequencies. For a 6 DOF system, the desired states can be expressed by a MIMO mass–damper–spring system:
Md  ̈ηd + Dd  ̇ηd + Gd ηd = Gd r (10.20)
where Md, Dd and Gd are positive design matrices specifying the desired dynamics of the system. The model (10.20) can also be represented as a linear time invariant (LTI) system:
x ̇ d = Ad xd + Bd r (10.21)
where xd := [ηd ,  ̇ηd ] ∈ R2n is the desired state vector, r ∈ Rr (r ≤ n) is a bounded reference vector usually generated by a joystick or a keyboard. The state and input matrices are recognized as
Ad =
[0 I
−M −1
d Gd −M−1
d Dd
]
, Bd =
[0
M −1
d Gd
]
(10.22)
Velocity Reference Model
The velocity reference model should at least be of order two so as to obtain smooth reference signals for the desired velocity νd and acceleration ν ̇d. Let rb denote the operator input expressed in {b}. The second-order LP filter (10.19) can be used for this purpose. Let
 ̈νd + 2 ν ̇d + 2νd = 2rb (10.23)
where νd is the desired velocity, ν ̇d is the desired acceleration and  ̈νd is interpreted as the desired “jerk”. For this model, > 0 and > 0 are diagonal design matrices of relative damping ratios and natural frequencies:
= diag{ζ1, ζ2, . . . , ζn}
= diag{ωn1 , ωn2 , . . . , ωnn }
The state space representation is
Ad =
[0 I
− 2 −2
]
, Bd =
[0
2
]
(10.24)
Note that a step in the command rb will give a step in  ̈νd while ν ̇d and νd will be low-pass filtered and therefore smooth signals in a tracking control system. We also notice that the steady-state velocity for a constant reference signal rb is
lim
t→∞ νd (t) = rb (10.25)


250 Guidance Systems
Position and Attitude Reference Models
The position and attitude reference model ηd is typically chosen to be of third order for filtering the steps in rn. This suggests that a first-order LP filter should be cascaded with a mass–damper–spring system. Moreover, consider the transfer function:
ηdi
rn
i
(s) = ω2
ni
(1 + Tis) (s2 + 2ζiωni s + ωn2i
) (i = 1, . . . , n) (10.26)
where a first-order LP filter with time constant Ti = 1/ωni > 0 has been added. This can also be written
ηdi
rn
i
(s) = ω3
ni
s3 + (2ζi + 1)ωni s2 + (2ζi + 1)ωn2i s + ωn3i
, (i = 1, . . . , n) (10.27)
or in a vectorial setting as
η(3)
d + (2 + I)  ̈ηd + (2 + I) 2  ̇ηd + 3ηd = 3rn (10.28)
The state-space representation is
Ad =
⎡
⎣
0I 0
00 I
− 3 −(2 + I) 2 −(2 + I)
⎤
⎦ , Bd =
⎡
⎣
0
0
3
⎤
⎦ (10.29)
In the case of n critically damped systems, ζi = 1 (i = 1, . . . , n), we have = I. Consequently,
η(3)
d + 3  ̈ηd + 3 2  ̇ηd + 3ηd = 3rn (10.30)
(s + ωni
)3 ηdi = ω3
ni rn
i (i = 1, . . . , n) (10.31)
These reference models models also satisfy
lim
t→∞ ηd (t) = rn (10.32)
if rn = constant.
Saturating Elements
One drawback with a linear reference model is that the time constants in the model often yield a satisfactory response for one operating point of the system while the response for other amplitudes of the operator input ri results in completely different behavior. This is due to the exponential convergence of the signals in a linear system. One way to circumvent this problem is to use amplitude gain scheduling so that the reference model design parameters (ζi, ωi) are scheduled with respect to the magnitude of the input signal ri. The performance of the linear reference model can also be improved by including saturation elements for velocity and acceleration according to
sat(x) =
{ sgn(x)xmax if |x| ≥ xmax
x else (10.33)


Trajectory Tracking 251
Figure 10.4 Reference model including saturating elements.
Hence, the saturation limits
νi ≤ νmax
i , ν ̇i ≤ ν ̇max
i (10.34)
should reflect the physical limitations of the craft as illustrated in Example 10.2. These techniques have been used in model reference adaptive control (MRAC) by Van Amerongen (1982, 1984) and adaptive control of underwater vehicles by Fjellstad et al. (1992). The position and attitude reference model should therefore be modified as shown in Figure 10.4.
Nonlinear Damping
Nonlinear damping can also be included in the reference model to reduce the velocity for large amplitudes or step inputs ri. This suggests the modified model:
η(3)
d + (2 + I)  ̈ηd + (2 + I) 2  ̇ηd + d(  ̇ηd ) + 3ηd = 3rn (10.35)
where the nonlinear function d( ̇ηd) = [d1( ̇ηd1 ), . . . , dn( ̇ηdn )] could be chosen as
di(  ̇ηdi ) =
∑
j
δij
∣∣  ̇ηdi
∣∣pj  ̇ηdi (i = 1, . . . , n) (10.36)
where δij > 0 are design parameters and pj > 0 are some integers. The effect of nonlinear damping is demonstrated in Example 10.2.
Example 10.2 (Reference Model)
Consider the mass–damper–spring reference model:
 ̇ηd = νd (10.37)
ν ̇d + 2ζωnνd + δ |νd | νd + ω2
nηd = ω2
nr (10.38)
where ζ = ωn = 1. Figure 10.5 shows a comparison of responses using δ = 0, δ = 1 and a saturating element, νmax = 1 for an operator step input r = 10. The Matlab example file ExRefMod.m in the MSS toolbox was used to generate the plots.
10.2.2 Trajectory Generation using a Marine Craft Simulator
The reference models in Section 10.2.1 are attractive due to their simplicity. The cutoff frequency of the reference model must never exceed the closed-loop bandwidth of the system in order to guarantee that


252 Guidance Systems
Figure 10.5 Desired position and velocity for a step input r = 10.
the craft is able to track the desired states. This is difficult to verify in a practical system due to factors such as nonlinearities, saturating elements and time delays. An alternative approach could be to generate a time-varying reference trajectory using a closed-loop model of the craft, where the time constants, relative damping ratios and natural frequencies are chosen to reflect physical limitations of the craft. For instance, the dynamic model can be chosen as
 ̇ηd = J (ηd)νd (10.39)
Mν ̇d + Nνd + g(ηd) = τ (10.40)
where the damping matrix is modeled as a diagonal matrix:
N = diag{n1, . . . , n6} > 0 (10.41)
The system inertia matrix M is included in the model to guarantee proper scaling of the control inputs τ. Smooth reference trajectories (ηd(t), νd(t)) are then obtained by simulating the model under closed-loop control, for instance by using a nonlinear PD controller (see Section 12.2):


Trajectory Tracking 253
τ = g(ηd ) − J (ηd ) [Kp(ηd − ηref ) + Kd  ̇ηd
] (10.42)
where ηref is the setpoint and (ηd, νd) represents the desired states. The control law (10.42) is in fact a guidance controller since it is applied to the reference model. In addition to this, it is useful to include saturation elements for velocity and acceleration to keep these quantities within their physical limits.
Example 10.3 (Generation of Reference Trajectories using a Marine Craft Simulator)
Consider a marine craft moving at forward speed U 0 such that u ≈ U and v ≈ 0. The desired reference trajectories can be modeled as
x ̇d = ud cos(ψd) (10.43)
y ̇d = ud sin(ψd) (10.44)
with the surge velocity given by
(m − X ̇u)  ̇ud + 1
2 ρCdA|ud|ud = τ (10.45)
where ud 0 is the desired velocity, ρ is the density of water, Cd is the drag coefficient, A is the projected cross-sectional area of the submerged hull in the x direction and (m − X ̇u) is the mass including the hydrodynamic added mass. Notice that the ship is moving so fast that quadratic drag dominates and linear damping due to skin friction can be neglected. The yaw dynamics is chosen as a first-order Nomoto model:
ψ ̇d = rd (10.46)
T r ̇d + rd = Kδ (10.47)
where K and T are the design parameters. The guidance system has two inputs, thrust τ and rudder angle δ. The guidance controllers for speed and yaw angle can be chosen of PI and PID types, respectively:
τ = −Kpτ (ud − uref ) − Kiτ
∫t
0
(ud − uref )dτ (10.48)
δ = −Kpδ(ψd − ψref ) − Kiδ
∫t
0
(ψd − ψref )dτ − Kdδrd (10.49)
where ψref is generated using an LOS algorithm (see Section 10.3):
ψref = atan2 (ylos − yd (t), xlos − xd (t)) (10.50)
Numerical integration of (10.43)–(10.47) with feedback (10.48)–(10.49) yields a smooth reference trajectory (xd, yd, ψd) and speed assignment Ud.
10.2.3 Optimal Trajectory Generation
Optimization methods can be used for trajectory and path generation. This gives a systematic method for inclusion of static and dynamic constraints. However, the challenge is that an optimization problem must be solved online in order to generate a feasible time-varying trajectory. Implementation and solution of


254 Guidance Systems
Figure 10.6 Optimal trajectory generation using an iterative solver to solve a minimum time or minimum power optimization problem.
optimization problems can be done using linear programming (LP), quadratic programming (QP) and nonlinear methods. All these methods require you to have a solver that can be implemented in your program; see Figure 10.6. For testing and development, the different algorithms can be implemented using the optimization toolbox in Matlab. The optimization problem can be formulated as minimum power or minimum time, for instance
J = min
ηd ,νd
{power,time} (10.51)
subject to
|U| ≤ Umax (maximum speed)
|r| ≤ rmax (maximum turning rate)
|ui| ≤ ui,max (saturating limit of control ui)
|  ̇ui| ≤  ̇ui,max (saturating limit of rate  ̇ui)
which represents the constraints imposed by the vehicle dynamics. It is also possible to add constraints for obstacle avoidance and minimum fuel consumption.
10.3 Path Following for Straight-Line Paths
A trajectory describes the motion of a moving object through space as a function of time. The object might be a craft, projectile or a satellite, for example. A trajectory can be described mathematically either by the geometry of the path (see Section 10.4) or as the position of the object over time. Path following is the task of following a predefined path independent of time; that is there are no temporal constraints. This means that no restrictions are placed on the temporal propagation along the path. Spatial constraints, however, can be added to represent obstacles and other positional constraints. A frequently used method for path following is line-of-sight (LOS) guidance. A LOS vector from the craft to the next waypoint or a point on the path between two waypoints can be used for both course and heading control. If the craft is equipped with a heading autopilot the angle between the LOS vector and the predescribed path can be used as a setpoint for the heading autopilot. This will force the craft to track the path. Guidance laws composed of speed and LOS steering laws, which can be combined in various ways to achieve different motion control objectives, are presented in the forthcoming section, which is adapted from Breivik and Fossen (2004b, 2005b, 2009) and Breivik et al. (2008).


Path Following for Straight-Line Paths 255
10.3.1 Path Generation based on Waypoints
Systems for waypoint guidance are used both for ships and underwater vehicles. These systems consist of a waypoint generator with a human interface. The selected waypoints are stored in a waypoint database and used for generation of a trajectory or a path for the moving craft to follow. Both trajectory and path-following control systems can be designed for this purpose. Sophisticated features such as weather routing, obstacle avoidance and mission planning can be incorporated in the design of waypoint guidance systems. Some of these features will be discussed in the forthcoming section.
Waypoint Representation
The route of a ship or an underwater vehicle is usually specified in terms of waypoints. Each waypoint is defined using Cartesian coordinates (xk, yk, zk) for k = 1, . . . , n. The waypoint database therefore consists of
wpt.pos = {(x0, y0, z0), (x1, y1, z1), . . . , (xn, yn, zn)}
For surface craft, only two coordinates (xk, yk) are used. Additionally, other waypoint properties such as speed and heading can be defined, that is
wpt.speed = {U0, U1, . . . , Un}
wpt.heading = {ψ0, ψ1, . . . , ψn}
For surface craft this means that the craft should pass through waypoint (xi, yi) at forward speed Ui with heading angle ψi. The three states (xi, yi, ψi) are also called the pose. The heading angle is usually unspecified during cross-tracking, whereas it is more important during a crab wise maneuver close to offshore installations (dynamic positioning). The waypoint database can be generated using many criteria. These are usually based on:
• Mission: The craft should move from some starting point (x0, y0, z0) to the terminal point (xn, yn, zn) via the waypoints (xi, yi, zi). • Environmental data: Information about wind, waves and ocean currents can be used for energy optimal routing (or avoidance of bad weather for safety reasons). • Geographical data: Information about shallow waters and islands should be included. • Obstacles: Floating constructions and other obstacles must be avoided. • Collision avoidance: Avoiding moving craft close to your own route by introducing safety margins. • Feasibility: Each waypoint must be feasible, in that it must be possible to maneuver to the next waypoint without exceeding the maximum speed and turning rate.
Online replanning can be used to update the waypoint database in case of time-varying conditions such as changing weather or moving craft (collision avoidance). Optimality with regard to weather is discussed in Section 10.4.1. This is referred to as weather routing.
Path Generation using Straight Lines and Circular Arcs
In practice it is common to represent the desired path using straight lines and circle arcs to connect the waypoints, as shown in Figure 10.7. This is related to the famous result of Dubins (1957), which can be summarized as:
The shortest path (minimum time) between two configurations (x, y, ψ) of a craft moving at constant speed U is a path formed by straight lines and circular arc segments.
Since a craft and not a point mass is considered, the start and end configurations of the craft are specified in terms of the positions (x, y), heading angle ψ and speed U. In addition, it is assumed that there are bounds


256 Guidance Systems
Figure 10.7 Straight lines and inscribed circles used for waypoint guidance.
on the turning rate r or the radius. The so-called Dubins path can also be proven by using Pontryagin’s maximum principle. Generation of Dubins paths including obstacle avoidance are discussed by Tsourdos et al. (2010). Extensions to the case with turn rate and acceleration limits (convected Dubins path) are made by Kostov and Degtiariova-Kostova (1993) and Scheuer and Laugier (1998). Path generation for the case of uniform currents are discussed by McGee et al. (2006) and Techy and Woolsey (2009, 2010). In the case of time-varying speed, a dynamic optimization problem including the marine craft surge dynamics must be solved. In this section, the discussion is limited to Dubins paths formed by straight lines and circles as shown in Figure 10.7, where the inscribed circle between two straight lines describes the desired turn. The radius of the inscribed circle is denoted R ̄ i (i = 1, . . . , n). The drawback of this strategy, in comparison with a cubic interpolation strategy, for instance, is that a jump in the desired yaw rate rd is experienced. This is due to the fact that the desired yaw rate along the straight line is rd = 0 while it is rd = constant on the circle arc during steady turning. Hence, there will be a jump in the desired yaw rate during transition from the straight line to the circle arc. This produces a small offset during cross-tracking. If a smooth reference trajectory, for instance generated by interpolation, is used, these drawbacks are overcome. However, it is convenient to use straight lines and circle arcs due to their simplicity. Another consideration is that the human operator can specify a circle with radius Ri about each waypoint (see Figure 10.7). These values are stored in the database as
wpt.radius = {R0, R1, . . . , Rn}


Path Following for Straight-Line Paths 257
Figure 10.8 Circle with radius R ̄ 1 inscribed between the points (x0, y0), (x1, y2) and (x2, y2).
The point where the circle arc intersects the straight line represents the turning point of the ship. Hence, the radius of the inscribed circle can be computed from Ri as
R ̄ i = Ri tan(αi) (i = 1, . . . , n) (10.52)
where αi is defined in Figure 10.8.
10.3.2 LOS Steering Laws
This section is based on Breivik and Fossen (2009) and Breivik (2010). For 2-D horizontal plane motions, the speed of the craft is defined as
U(t) := ‖v(t)‖ = √
x ̇(t)2 + y ̇(t)2 ≥ 0 (10.53)
while steering is related to the angle
χ(t) := atan2 (y ̇(t), x ̇(t)) ∈ S := [−π, π] (10.54)


258 Guidance Systems
where atan2 (y, x) is the four-quadrant version of arctan(y/x) ∈ [−π/2, π/2]. Path following is ensured by proper assignments to χ(t) (steering control) as long as U(t) > 0 (positive speed) since the scenario only involves a spatial constraint. Consider a straight-line path implicitly defined by two waypoints pn
k = [xk, yk] ∈ R2 and pn
k+1 = [xk+1, yk+1] ∈ R2, respectively. Also, consider a path-fixed reference frame with origin in pn
k
whose x axis has been rotated by a positive angle:
αk := atan2 (yk+1 − yk, xk+1 − xk) ∈ S (10.55)
relative to the x axis. Hence, the coordinates of the craft in the path-fixed reference frame can be computed by
ε(t) = Rp(αk) (pn(t) − pn
k) (10.56)
where
Rp(αk) :=
[ cos(αk) − sin(αk)
sin(αk) cos(αk)
]
∈ SO(2) (10.57)
and ε(t) = [s(t), e(t)] ∈ R2 with
s(t) = along-track distance (tangential to path)
e(t) = cross-track error (normal to path)
For path-following purposes, only the cross-track error is relevant since e(t) = 0 means that the craft has converged to the straight line. Expanding (10.56), the along-track distance and cross-track error can be explicitly stated by
s(t) = [x(t) − xk] cos(αk) + [y(t) − yk] sin(αk) (10.58)
e(t) = −[x(t) − xk] sin(αk) + [y(t) − yk] cos(αk) (10.59)
and the associated control objective for straight-line path following becomes
lim
t→∞e(t) = 0 (10.60)
In order to ensure that e(t) → 0, both course and heading angle commands can be used. Two different guidance principles can be used to steer along the LOS vector (Breivik and Fossen, 2009):
• Enclosure-based steering • Lookahead-based steering
and at the same time stabilize e(t) to the origin. The two steering methods essentially operate by the same principle, but as will be made clear, the lookahead-based approach motivated by missile guidance has several advantages over the enclosure-based approach.
Enclosure-Based Steering
Consider a circle with radius R > 0 enclosing pn = [x, y] . If the circle radius is chosen sufficiently large, the circle will intersect the straight line at two points. The enclosure-based strategy for driving e(t) to zero is then to direct the velocity toward the intersection point pn
los = [xlos, ylos] that corresponds to


Path Following for Straight-Line Paths 259
Figure 10.9 LOS guidance where the desired course angle χd (angle between xn and the desired velocity vector) is chosen to point toward the LOS intersection point (xlos, ylos).
the desired direction of travel, which is implicitly defined by the sequence in which the waypoints are ordered. Such a solution involves directly assigning χd as shown in Figure 10.9. Since
tan (χd(t)) = y(t)
x(t) = ylos − y(t)
xlos − x(t) (10.61)
the desired course angle can be computed as
χd(t) = atan2 (ylos − y(t), xlos − x(t)) (10.62)
In order to calculate the two unknowns in pn
los = [xlos, ylos
] , the following two equations must be solved:
[xlos − x(t)]2 + [ylos − y(t)]2 = R2 (10.63)
tan(αk) = yk+1 − yk
xk+1 − xk
= ylos − yk
xlos − xk
= constant (10.64)
where (10.63) represents the Pythagoras theorem, while (10.64) states that the slope of the line between the two waypoints is constant. LOS guidance has been applied to surface ships by McGookin et al.


260 Guidance Systems
(2000b) and Fossen et al. (2003b). These equations are solved in the following, temporarily dropping the time dependence of the variables for notational convenience. Denote the difference between the x and y positions of the two waypoints as x := xk+1 − xk and y := yk+1 − yk, respectively. The equations are first solved analytically assuming that | x| > 0 and, second, for the case x = 0.
Case 1: For | x| > 0, Equation (10.64) results in
ylos =
(y
x
)
(xlos − xk) + yk (10.65)
when choosing to solve for ylos. For simplicity and brevity in the calculations that follow, denote
d :=
(y
x
)
, e := xk, f := yk
Expanding (10.63) yields
x2
los − 2xxlos + x2 + y2
los − 2yylos + y2 = R2 (10.66)
where
y2
los =
[( y
x
)
(xlos − xk) + yk
]2
= [dxlos + (f − de)]2
= (dxlos + g)2
= d2x2
los + 2dgxlos + g2 (10.67)
where
g := f − de = yk −
(y
x
)
xk
has been used. Subsequently, consider
2yylos = 2y(dxlos + g) = 2dyxlos + 2gy (10.68)
such that (10.67) and (10.68) inserted into (10.66) gives:
(1 + d2)x2
los + 2(dg − dy − x)xlos + (x2 + y2 + g2 − 2gy − R2) = 0 (10.69)
which is a standard, analytically solvable second-order equation. Then, denote
a := 1 + d2
b := 2(dg − dy − x)
c := x2 + y2 + g2 − 2gy − R2
from which the solution of (10.69) becomes
xlos = −b ± √b2 − 4ac
2a (10.70)


Path Following for Straight-Line Paths 261
where if x > 0, then xlos = −b + √b2 − 4ac/2a, and if x < 0, then xlos = −b − √b2 − 4ac/2a. Having calculated xlos, ylos is easily obtained from (10.65). Note that when y = 0, ylos = yk (= yk+1). Case 2: If x = 0, only (10.63) is valid, which means that
ylos = y ± √
r2 − (xlos − x)2 (10.71)
where xlos = xk (= xk+1). If y > 0, then ylos = y + √
R2 − (xlos − x)2, and if y < 0, then
ylos = y − √
R2 − (xlos − x)2. When x = 0, y = 0 is not an option.
Lookahead-Based Steering
For lookahead-based steering, the course angle assignment is separated into two parts:
χd(e) = χp + χr(e) (10.72)
where
χp = αk (10.73)
is the path-tangential angle (see Figure 10.9), while
χr(e) := arctan
( −e )
(10.74)
is a velocity-path relative angle, which ensures that the velocity is directed toward a point on the path that is located a lookahead distance (t) > 0 ahead of the direct projection of pn(t) on to the path (Papoulias, 1991). As can be immediately noticed, this lookahead-based steering scheme is less computationally intensive than the enclosure-based approach. It is also valid for all cross-track errors, whereas the enclosure-based strategy requires R ≥ |e(t)|. Furthermore, Figure 10.10 shows that
e(t)2 + (t)2 = R2 (10.75)
which means that the enclosure-based approach corresponds to a lookahead-based scheme with a time variation
(t) = √
R2 − e(t)2 (10.76)
varying between 0 and R for |e(t)| = R and |e(t)| = 0, respectively.


262 Guidance Systems
Figure 10.10 Circle of acceptance with constant radius R illustrating the geometric relationship e(t)2 + (t)2 = R2.
The steering law (10.74) can also be interpreted as a saturating control law:
χr(e) = arctan (−Kpe) (10.77)
where Kp(t) = 1/ (t) > 0. Notice that the lookahead-based steering law is equivalent to a saturated proportional control law, effectively mapping e ∈ R into χr(e) ∈ [−π/2, π/2]. As can be inferred from the geometry of Figure 10.10, a small lookahead distance implies aggressive steering, which intuitively is confirmed by a correspondingly large proportional gain in the saturated control interpretation. This interpretation also suggests the possibility of introducing integral action into the steering law (10.74), such that
χr(e) = arctan
(
−Kpe − Ki
∫t
0
e(τ)dτ
)
(10.78)
where Ki > 0 represents the integral gain. Integral action can be particularly useful for underactuated craft that can only steer by attitude information, enabling them to follow straight-line paths while under the influence of ocean currents and nonzero sideslip angles β, even without having access to velocity information. Thus, considering horizontal path following along straight lines, the desired yaw angle can be computed by
χd(e) = αk + χr(e) (10.79)
with χr(e) as in (10.78). In practice, to avoid overshoot and windup effects, care must be taken when using integral action in the steering law. Specifically, the integral term should only be used when a steady-state off-track condition is detected.


Path Following for Straight-Line Paths 263
Figure 10.11 LOS guidance principle where the sideslip angle β either can be chosen as zero and compensated for by using integral action or nonzero by using velocity measurements.
Path-Following Controllers
Consider the LOS intersection point pn
los in Figure 10.9. Different principles for path following can be applied depending on whether you have access to velocity measurements or not:
Method A (Body x axis and LOS vector aligned): Assume that the velocity is unknown and compute the desired heading angle according to the enclosure-based steering law (10.62):
ψd(t) = atan2 (ylos − y(t), xlos − x(t)) (10.80)
such that the body x axis of the craft points in the direction of the LOS intersection point pn
los. In this approach, the sideslip angle β is assumed to be unknown and the control objective is ψ → ψd (see Figure 10.11). Consequently, a heading autopilot of PID type is
τ = −Kpψ ̃ − Kd ψ ̃ ̇ − Ki
∫t
0
ψ ̃(τ)dτ (10.81)
where ψ ̃ = ψ − ψd can be used. The price to be paid is that the craft will behave like an object hanging in a rope and the craft’s lateral distance to the path will depend on the magnitude of the environmental forces and thus the sideslip angle β. This is due to the fact that ψ = χ only if β = 0. If such deviations cannot be accepted, the speed and LOS vectors should be aligned using Method B (see Figure 10.12). Method B (Velocity and LOS vectors aligned): Compute the desired course angle χd such that the velocity vector is along the path (LOS vector) using the lookahead-based steering law:
χd (e) = χp + χr(e)
= αk + arctan (−Kpe) (10.82)
The control objective χ → χd is satisfied by transforming the course angle command χd to a heading angle command ψd by using (2.96). This requires knowledge of β since (see Figure 10.11)
ψd = χd − β (10.83)


264 Guidance Systems
Figure 10.12 Body x-axis aligned with the LOS vector (Method A) or alternatively velocity and LOS vectors aligned (Method B). Notice that Method A gives a lateral offset to the path.
Hence, the velocity and LOS vectors can be aligned using the heading controller (12.178) with the following error signal:
ψ ̃ = ψ − ψd
= ψ − χd + β (10.84)
as illustrated in Figure 10.11. If the velocities of the craft are measured, the sideslip angle can be computed by
β = arcsin
(v
U
)
(10.85)
Guidance laws of PI type, for instance (10.78), avoid velocity measurements by treating β as an unknown slowly varying disturbance satisfying β ̇ ≈ 0.
Circle of Acceptance for Surface Vessels
When moving along a piece wise linear path made up of n straight-line segments connected by n + 1 waypoints, a switching mechanism for selecting the next waypoint is needed. Waypoint (xk+1, yk+1) can be selected on the basis of whether or not the craft lies within a circle of acceptance with radius Rk+1 around (xk+1, yk+1). Moreover, if the craft positions (x, y) at time t satisfy
[xk+1 − x(t)]2 + [yk+1 − y(t)]2 ≤ R2
k+1 (10.86)
the next waypoint (xk+1, yk+1) should be selected. A guideline could be to choose Rk+1 equal to two ship lengths, that is Rk+1 = 2Lpp. Note that for the enclosure-based approach, such a switching criterion entails the additional (conservative) requirement r ≥ Rk+1. A perhaps more suitable switching criterion solely involves the along-track


Path Following for Straight-Line Paths 265
Figure 10.13 Remotely operated vehicle (ROV) performing offshore inspection and maintenance. Illustration by Bjarne Stenberg/SINTEF.
distance s, such that if the total along-track distance between waypoints pn
k and pn
k+1 is denoted sk+1, a switch is made when
sk+1 − s(t) ≤ Rk+1 (10.87)
which is similar to (12.189) but has the advantage that pn(t) does not need to enter the waypoint enclosing circle for a switch to occur; that is no restrictions are put on the cross-track error. Thus, if no intrinsic value is associated with visiting the waypoints and their only purpose is to implicitly define a piece-wise linear path, there is no reason to apply the circle-of-acceptance switching criterion (12.189).
Extension to 3-D LOS Guidance for Underwater Vehicles
It is straightforward to generalize the concepts of LOS guidance to 3-D maneuvering. Also for this case, the desired course angle χd can be chosen as (10.62) with the LOS intersection point given by (10.63) and (10.64) under the assumption that the vehicle performs slow maneuvers in the vertical plane such that a depth controller can easily achieve z = zd. This works quite well for vehicles moving at low speed since it is not necessary to pitch the vehicle in order to move vertically; see Figure 10.13. A typical example is a working ROV with a broad, flattened front (bluff body) moving vertically using a vertical thruster. The circle of acceptance must, however, be replaced by a sphere of acceptance (Healey and Lienard, 1993):
[xk+1 − x(t)]2 + [yk+1 − y(t)]2 + [zk+1 − z(t)]2 ≤ R2
k+1 (10.88)


266 Guidance Systems
A more sophisticated approach will be to compute the azimuth and elevation angles needed to move in 3-D to the next waypoint (Breivik and Fossen, 2009). This approach is used for “ flying” vehicles equipped with fins for diving and depth control. These vehicles move at a higher speed in order to produce lifting forces (no vertical thrusters) and consequently they behave like an aircraft, where it is possible to control the coupled surge, heave and pitch motions (longitudinal motions).
10.4 Path-Following for Curved Paths
This section relaxes the condition that the path consists of straight lines between waypoints. Instead, it is assumed that the guidance systems can make use of a predefined parametrized path. The path-following controller is a kinematic controller that generates the desired states for the motion control system using the parametrization of the path. The drawback is that the path must be parametrized and known in advance. In many cases this is not practical and a simpler path consisting of waypoints and straight lines must be used. The solution for this is presented in Section 10.3. Section 10.4.1 discusses path generation while a path-following controller for parametrized paths is derived in Section 10.4.2. For a parametrized path, the following definitions are adopted from Skjetne et al. (2004):
Definition 10.2 (Parametrized Path)
A parametrized path is defined as a geometric curve ηd( ) ∈ Rq with q ≥ 1 parametrized by a continuous path variable .
For marine craft it is common to use a 3-D representation:
pn
d( ) = [xd( ), yd( ), zd( )] ∈ R3 (10.89)
where the first two coordinates describe the position in the horizontal plane and the last coordinate is the depth. For surface vessels only xd and yd are needed while underwater vehicles use all three coordinates. The first- and second-order derivatives of pn( ) with respect to are denoted as p′ and p′′, respectively. A frequently used solution of the path-following problem is to solve it as the geometric task of a maneuvering problem, given by the following definition:
Definition 10.3 (Maneuvering Problem)
The maneuvering problem involves solving two tasks:
1. Geometric Task: Force the position pn(t) to converge to a desired path pn
d( (t)),
lim
t→∞
[pn (t) − pn
d ( (t))] = 0 (10.90)
for any continuous function (t). 2. Dynamic Task: Force the speed  ̇ to converge to a desired speed Ud according to
lim
t→∞
[
 ̇ (t) − Ud ( (t))
√(x′
d )2 + (y′
d )2
]
= 0 (10.91)
The dynamic task follows from
Ud (t) = √
 ̇u2
d (t) +  ̇v2
d (t) = √
x′
d ( )2 + y′
d( )2  ̇ (t) (10.92)
Definition 10.3 implies that the dynamics (t) along the path can be specified independently of the error dynamics. A special case of the maneuvering problem is
 ̇ (t) = 1, (0) = 0 (10.93)


Path-Following for Curved Paths 267
which is recognized as the tracking problem since the solution of (10.93) is = t. A solution to the maneuvering problem for fully actuated craft is found in Skjetne et al. (2004).
10.4.1 Path Generation using Interpolation Methods
The path can be generated using spline or polynomial interpolation methods to generate a curve (xd( ), yd( )) through a set of N predefined waypoints. Notice that a trajectory (xd(t), yd(t)) is obtained by choosing  ̇ = k such that = kt where k ∈ R.
Cubic Spline and Hermite Interpolation
In Matlab, several methods for interpolation are available.
Matlab
The different methods for interpolation are found by typing
help polyfun
Two useful methods for path generation are the cubic spline interpolant (spline.m) and the piecewise cubic Hermite interpolating polynomial (pchip.m).
The main difference between Hermite and cubic spline and interpolation is how the slopes at the end points are handled. For simplicity let us consider the problem of trajectory generation. The cubic Hermite interpolant ensures that the first-order derivatives ( ̇xd(t), y ̇d(t)) are continuous. In addition, the slopes at each endpoint are chosen in such a way that (xd(t), yd(t)) are shape preserving and respect monotonicity. Cubic spline interpolation is usually done by requiring that the second-order derivatives ( ̈xd(t), y ̈d(t)) at the endpoints of the polynomials are equal, which gives a smooth spline. Consequently, the cubic spline will be more accurate than the Hermite interpolating polynomial if the data values are of a smooth function. The cubic Hermite interpolant, on the contrary, has less oscillations if the data are nonsmooth. The results of interpolating a set of predefined waypoints to a trajectory (xd( ), yd( )) using the cubic Hermite interpolant and cubic spline interpolation methods are shown in Figure 10.14. It is seen that different behaviors are obtained due to the conditions on the first- and second-order derivatives at the endpoints.
Polynomial Interpolation
Instead of using the Matlab functions pchip.m and spline.m a cubic spline can be interpolated through a set of waypoints by considering the cubic polynomials
xd ( ) = a3 3 + a2 2 + a1 + a0 (10.94)
yd ( ) = b3 3 + b2 2 + b1 + b0 (10.95)
where (xd( ), yd( )) are the position of the craft and where is a path variable given by
 ̇ = f ( , t) (10.96)


268 Guidance Systems
Figure 10.14 Methods for waypoint interpolation; see ExSpline.m in the MSS toolbox.
The partial derivatives of xd( ) and yd( ) with respect to are
x′
d ( ) = dxd ( )
d = 3a3 2 + 2a2 + a1 (10.97)
y′
d ( ) = dyd ( )
d = 3b3 2 + 2b2 + b1 (10.98)
Hence, the desired speed Ud(t) of the craft can be computed as
x ̇d(t) = dxd( )
d  ̇ (t) (10.99)
y ̇d(t) = dyd( )
d  ̇ (t) (10.100)
resulting in
Ud(t) = √
x ̇ 2
d (t) + y ̇ 2
d (t)
=√
x′
d ( )2 + y′
d( )2  ̇ (t) (10.101)


Path-Following for Curved Paths 269
Similarly, an expression for the acceleration U ̇ d(t) can be found.
Matlab
The script ExSpline.m generates the plots in Figure 10.14:
% ExSpline - Cubic Hermite and spline interpolation of waypoints
wpt.pos.x = [0 100 500 700 1000];
wpt.pos.y = [0 100 100 200 160];
wpt.time = [0 40 60 80 100];
t = 0:1:max(wpt.time); % time
x p = pchip(wpt.time,wpt.pos.x,t); % cubic Hermite interpolation
y p = pchip(wpt.time,wpt.pos.y,t);
x s = spline(wpt.time,wpt.pos.x,t); % spline interpolation
y s = spline(wpt.time,wpt.pos.y,t);
subplot(311), plot(wpt.time,wpt.pos.x,’o’,t,[x p; x s])
subplot(312), plot(wpt.time,wpt.pos.y,’o’,t,[y p; y s])
subplot(313), plot(wpt.pos.y,wpt.pos.x,’o’,y p,x p,y s,x s)
The unknown parameters a0,a1, a2, a3, b0, b1, b2, b3 in (10.94) and (10.95) can also be computed using a cubic spline algorithm, as shown below.
Cubic Spline Algorithm for Path Generation
The path through the waypoints (xk−1, yk−1) and (xk, yk) must satisfy
xd ( k−1) = xk−1, xd ( k) = xk (10.102)
yd ( k−1) = yk−1, yd ( k) = yk (10.103)
where k = 1, . . . , n. In addition, smoothness is obtained by requiring that
lim
→−
k
x′
d ( k) = lim
→+
k
x′
d( k) (10.104)
lim
→−
k
x′′
d ( k) = lim
→+
k
x′′
d( k) (10.105)
For this problem, it is possible to add only two boundary conditions (velocity or acceleration) for the x and y equations, respectively. Hence,
x′
d ( 0) = x′
0, x′
d ( n) = x′
n (10.106)
y′
d( 0) = y′
0, y′
d( n) = y′
n (10.107)


270 Guidance Systems
or
x′′
d ( 0) = x′′
0 , x′′
d ( n) = x′′
n (10.108)
y′′
d ( 0) = y′′
0 , y′′
d ( n) = y′′
n (10.109)
The polynomial xd( k) is given by the parameters ak = [a3k, a2k, a1k, a0k] , resulting in 4(n − 1) unknown parameters. The number of constraints are also 4(n − 1) if only velocity or acceleration constraints are chosen at the end points. The unknown parameters for n waypoints are collected into a vector:
x = [ak , . . . , an−1] (10.110)
Hence, the cubic interpolation problem can be written as a linear equation:
y = A( k−1, . . . , k)x, k = 1, 2, . . . , n (10.111)
where
y = [xstart, x0, x1, x1, 0, 0, x2, x2, 0, 0, . . . , xn, xfinal] (10.112)
The start and end points can be specified in terms of velocity or acceleration constraints xstart ∈ {x′
0, x′′
0}
and xfinal ∈ {x′
n, x′′
n}, respectively. This gives
A( k−1, . . . , k) =
⎡
⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎣
cstart 01×4 01×4 . . . 01×4
p( 0) 01×4 01×4 01×4
p( 1) 01×4 01×4 01×4
0 p( 1) 01×4 01×4
−v( 1) v( 1) 01×4 01×4
−a( 1) a( 1) 01×4 01×4
01×4 p( 2) 01×4 01×4
01×4 01×4 p( 2) 01×4
01×4 −v( 2) v( 2) 01×4
01×4 −a( 2) a( 2) 01×4
... . . .
01×4 01×4 01×4 p( n)
01×4 01×4 01×4 . . . cfinal
⎤
⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎦
(10.113)
where cstart ∈ {x′
d ( 0), x′′
d ( 0)}, cfinal ∈ {x′
d ( n), x′′
d ( n)} and
p( k) = [ 3
k, 2
k , k, 1] (10.114)
v( k) = p′( k) = [3 2
k , 2 k, 1, 0] (10.115)
a( k) = p′′( k) = [6 k, 2, 0, 0] (10.116)


Path-Following for Curved Paths 271
Figure 10.15 Polynomials xd( ) and yd( ) and their first- and second-order derivatives.
Equation (10.111) can be solved for k = 0, 1, . . . , n according to
x = A−1y (10.117)
The formulae for bk = [b3k, b2k, b1k, b0k] are obtained in a similar manner.
Matlab
Formula (10.117) has been implemented in the script ExPathGen.m.and pva.m.The results are for the following set of waypoints:
wpt.pos.x = [0 200 400 700 1000]
wpt.pos.y = [0 200 500 400 1200]
where = 0, . . . , 4 are shown in Figures 10.15 and 10.16.


272 Guidance Systems
Figure 10.16 The xy plot based on a cubic spline.
Transformation of Path to Reference Trajectories using Desired Speed Profiles
In Figure 10.16 it is seen that the solution between two successive waypoints
xd ( ) = a3 3 + a2 2 + a1 + a0 (10.118)
yd ( ) = b3 3 + b2 2 + b1 + b0 (10.119)
is indeed a time-independent path when xd( ) is plotted against yd( ) for increasing values. The path can be transformed to a time-varying trajectory by defining a speed profile. The speed profile assigns dynamics to (t) such that the desired path transforms to a time-dependent reference trajectory at the same time as the desired speed and acceleration profiles are preserved. From (10.101) it is seen that
 ̇ (t) = Ud(t)
√x′
d ( )2 + y′
d( )2 , (tk) = k (10.120)


Path-Following for Curved Paths 273
where (tk) = k is the initial condition of the differential equation and Ud(t) is the desired speed profile. Let Uref be the input to a first-order system:
T U ̇ d(t) + Ud(t) = Uref , T > 0 (10.121)
A smooth transition from the desired speed Ud(tk) at waypoint k to the next waypoint k + 1 can be made by using
Uref = Ud (tk+1) (10.122)
This is illustrated in the following example.
Example 10.4 (Transformation of Path to Reference Trajectories) Consider the first two waypoints in the example file ExPathGen.m:
(x0, y0) = (0, 0)
(x1, y1) = (200, 200)
The cubic polynomials satisfying (10.117) are
xd( ) = −29.89 3 + 135.63 2 + 94.25
yd( ) = 108.05 3 − 2.30 2 + 94.25
for ∈ [0, 1]. Let the speed dynamics time constant be T = 10 s. Assume that the craft is initially at rest (Ud(t0) = 0) and that the desired speed of waypoint number 1 is Uref = Ud(t1) = 5.0 m/s . The numerical solutions of
 ̇ (t) = Ud(t)
√x′
d ( )2 + y′
d( )2 (10.123)
T U ̇ d(t) + Ud(t) = Uref (10.124)
for waypoints 0 and 1 corresponding to 0(t0) = 0 and 1(t1) = 1 with t0 = 0 and t1 unknown, is shown in Figure 10.17; see ExPathGen.m. It is seen that the desired speed of 5.0 m/s is reached in approximately 67 s. Hence, the terminal time must be chosen as t1 ≥ 67 s (corresponding to (t1) = 1) in order to satisfy the desired speed dynamics. If t1 < 67 s there is not enough time to reach the desired speed of waypoint 1 unless the time constant T is reduced. The time constant should reflect what is physically possible for the craft. Notice that the path (xd( ), yd( )) has been transformed to a timevarying reference trajectory (xd(t), yd(t)) by assigning a speed profile (10.123) to be solved numerically with the path planner (10.117). This gives design flexibility since the path can be generated off-line using a waypoint database while speed is assigned to the path when the dynamics of the actual craft is considered.
Nonlinear Constrained Optimization
Another solution to trajectory and path generation is to use nonlinear constrained optimization techniques. These methods allow an object function to be specified where minimum time and energy are design goals. In addition, the speed and acceleration constraints of the craft can be added. The drawback is that nonlinear constraint optimization problems are much harder to solve numerically than the methods described


274 Guidance Systems
Figure 10.17 Upper plot shows that the speed Ud(t) reaches the desired value of 5.0 m/s in approximately 67 s. The lower plot shows that the path variable (t) is incremented from 0 to 1 during the speed transition.
in the previous sections. The Matlab optimization toolbox will be used to demonstrate how this can be done. In general, trajectory-tracking and path-planning problems can be formulated as
J = min
x {f (x)} (10.125)
subject to gk(x) ≤ 0 (k = 1, . . . , ng)
hj(x) = 0 (j = 1, . . . , nh)
xi,min ≤ xi ≤ xi,max (i = 1, . . . , nx)
where f (x) should be minimized with respect to the parameter vector x with gi(x) and hj(x) as nonlinear inequality and equality constraints, respectively. An attractive simplification is to use quadratic


Path-Following for Curved Paths 275
programming. Consequently,
J = min
x
{1
2 x Hx + f x
}
(10.126)
subject to Ax ≤ b
xi,min ≤ xi ≤ xi,max (i = 1, . . . , nx)
For simplicity, consider two waypoints (xk, yk) and (xk+1, yk+1) satisfying
x(tk) = xk, y(tk) = yk (10.127)
x(tk+1) = xk+1, y(tk+1) = yk+1 (10.128)
Choosing the speed constraints as
x ̇d(t) = Ud(t) cos(ψd(t)) (10.129)
y ̇d(t) = Ud(t) sin(ψd(t)) (10.130)
where the angle ψd(t) is computed as ψd(tk) = atan2(yk+1 − yk, xk+1 − xk), that is with direction toward the next waypoint. Hence,
x ̇d(tk) = Uk cos(ψk) (10.131)
y ̇d(tk) = Uk sin(ψk) (10.132)
For two waypoints this results in
y = A(tk, tk+1)x (10.133)
where
y = [xk, xk+1, yk, yk+1, Uk cos(ψk), Uk sin(ψk), Uk+1 cos(ψk+1), Uk+1 sin(ψk+1)] (10.134)
and
A(tk, tk+1) =
⎡
⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎢⎣
t3
k t2
k tk 1 0 0 0 0
t3
k+1 t2
k+1 tk+1 1 0 0 0 0
0 0 0 0 t3
k t2
k tk 1
0 0 0 0 t3
k+1 t2
k+1 tk+1 1
3t2
k 2tk 1 0 0 0 0 0
0 0 0 0 3t2
k 2tk 1 0
3t2
k+1 2tk+1 1 0 0 0 0 0
0 0 0 0 3t2
k+1 2tk+1 0 0
⎤
⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎥⎦
(10.135)
The criterion to minimize is
J = min
x
{[A(tk, tk+1)x − y] [A(tk, tk+1)x − y]} (10.136)


276 Guidance Systems
for given pairs (tk, tk+1) of time. Expanding this expression yields
J ̄ = 1
2
(J − y y) = min
x
{1
2 x A (tk, tk+1)A(tk, tk+1)x − y A(tk, tk+1)x
}
(10.137)
implying that
H = A (tk, tk+1)A(tk, tk+1) (10.138)
f = −y A(tk, tk+1) (10.139)
In this expression, the starting time tk is given while the arrival time tk+1 is unknown. The cubic polynomials (10.94)–(10.95) imply that there are eight additional unknown parameters to optimize:
x = [a3, a2, a1, a0, b3, b2, b1, b0] (10.140)
giving a total of nine unknown parameters. In addition, linear constraints Ax ≤ b can be added. The reference trajectory can be found using quadratic programming.
Matlab
Trajectory generation using the optimization toolbox is demonstrated in the following example:
Example 10.5 (Trajectory Generation using Quadratic Programming) Consider two waypoints:
(x0, y0) = (10, 10)
(x1, y1) = (200, 100)
with the speed constraint
Ud(t) ≤ 10 m/s
in the MSS toolbox script
ExQuadProg
The desired waypoint speeds are U0(t0) = 0 m/s and U1(t1) = 5 m/s with t0 = 0 s. The arrival time t1 is computed in a loop by solving the quadratic optimization problem (10.126) for each time t1 = t0+ dt where dt is incremented by 1.0 s each time. This process is terminated when the first solution Ud(t) ≤ 10 m/s is reached (this can be easily changed if other requirements are more important). The optimal solution:
xd(t) = −0.0102 t3 + 0.5219 t2 − 4.28 × 10−12 t + 10.0
yd(t) = −0.0048 t3 + 0.2472 t2 − 1.04 × 10−12 t + 10.0
for t ∈ [t0, t1] is obtained after 29 loops (t1 = 29 s) using quadprog.m in the Matlab optimization toolbox. The results are shown in Figure 10.18.


Path-Following for Curved Paths 277
Figure 10.18 The two upper plots show the cubic polynomials xd(t) and yd(t). In the third plot yd(t) is plotted against xd(t) while the lower plot is speed Ud(t).
Weather Routing
A weather routing or voyage planning system (VPS) computes the most efficient route using meteorological and oceanographic data, information about the craft’s hull and propulsion system and shipping economics to ensure that the craft reaches port on time. The data from this analysis can be waypoints with optimal speed and heading information. The routing software of a modern weather routing system includes features such as:
• Surface analysis and forecast models • Sea state and wind wave models • Upper air models • Formation description of low-pressure systems • Hurricanes and tropical weather models • Ocean current models • Vessel performance models • Cargo condition, trim, draft and deck load • Link to Internet sources for weather data • Interface to a satellite system transmitting weather data


278 Guidance Systems
Figure 10.19 Kinematic description of the Serret–Frenet frame.
• Optimization of routes based on a fixed estimated time of arrival (ETA) • Routing of vessels around hazardous weather conditions
An optimal route is computed using a numerical optimization offline. This can be done by a computer onboard the craft or by a company onshore transmitting the results to the craft electronically on a 24-hour basis. Several companies offer continuous voyage monitoring with status reports and performance evaluations. This allows for replanning during changing weather conditions. Global weather information is available from several forecast centers. Some useful references for weather routing of ships are Calvert (1989), Hagiwara (1989), Padadakis and Perakis (1990), Lo (1991), Barbier et al. (1994), Lo and McCord (1995), McCord and Smith (1995) and Lo and McCord (1998).
10.4.2 Path-Following Kinematic Controller
The path-following controller is a kinematic controller that generates the desired states for the motion control system. For a parametrized path in 2-D,
pn
d( ) =
[ xd( )
yd ( )
]
∈ R2 (10.141)
the kinematic controller can be designed using a dynamic model of the craft by specifying a reference frame that moves along the path; see Figure 10.19. This reference frame is usually chosen as the SerretFrenet frame (see Frenet, 1847, Serret, 1851). During path following, the craft speed is denoted U and the kinematic controller is designed to: (i) regulate the distance e between the vehicle and the path to zero and (ii) regulate the angle χSF between the craft speed vector and the tangent to the path to zero (see Samson, 1992, Micaelli and Samson, 1993).
Definition 10.4 (Serret-Frenet Frame)
The virtual target defined by the projection of an actual craft on to a path-tangential reference frame (Serret–Frenet frame {SF}) evolves according to (Lapierre and Soetanto, 2007)


Path-Following for Curved Paths 279
s ̇ = U cos(χSF) − (1 − κe)s ̇a (10.142)
 ̇e = U sin(χSF) − κss ̇a (10.143)
χ ̇ SF = r + β ̇ − κs ̇a (10.144)
where U is the speed of the craft and (e, s) is the location on the path of {SF} relative to {b}. If s = 0, the variable e represents the closest distance between the actual craft and the origin of {SF} tangential to the path. Hence, s can be viewed as an extra controller design parameter for evolution along the path. The arc length that the target has moved along the path is denoted sa while χSF is the angle between the x axis of {SF} and the speed vector; see Figure 10.19. Finally, κ is the path curvature.
Proof: From Figure 10.19, it is seen that the distance vectors between {n}, {b} and {SF} satisfies
rb/n = rSF/n + rb/SF (10.145)
Hence, the time differentiation of rb/SF with {b} as the moving reference frame gives
id
dt rb/SF =
bd
dt rb/SF + ωb/i × rb/SF (10.146)
such that
vb/n = vSF/n +
( bd
dt rb/SF + ωSF/n × rb/SF
)
(10.147)
Expressing this in {SF} gives
vSF
b/n = vSF
SF/n +
( bd
dt rSF
b/SF + ωSF
SF/n × rSF
b/SF
)
(10.148)
where rSF
b/SF = [s, e, 0] and vSF
b/n = Rz,χSF [U, 0, 0] is the velocity of the vehicle expressed in {SF }. From this it follows that
Rz,χSF
⎡
⎣
U
0
0
⎤
⎦ = vSF
SF/n +
( bd
dt (rSF
b/SF) + ωSF
SF/n × rSF
b/SF
)
=
⎡
⎣
s ̇a
0
0
⎤
⎦+
⎡
⎣
s ̇
 ̇e
0
⎤
⎦+
⎡
⎣
0
0
κs ̇a
⎤
⎦×
⎡
⎣
s
e
0
⎤
⎦ (10.149)
Expanding this expression yields
U cos(χSF) = s ̇ + (1 − κe)s ̇a (10.150)
U sin(χSF) =  ̇e + κss ̇a (10.151)


280 Guidance Systems
which proves (10.142) and (10.143). The rotation rate of the angle ψ − ψSF between {n} and {SF} (see Figure 10.19) is (ψ ̇ − ψ ̇ SF) = κs ̇a. Since χSF = ψSF + β, it follows that
χ ̇ SF = ψ ̇ − κs ̇a + β ̇
= r + β ̇ − κs ̇a (10.152)
which proves (10.144).
Remark 10.1
If s ̇ = s = 0, the {SF} equations become
s ̇a = U cos(χSF)
1 − κe (10.153)
 ̇e = U sin(χSF) (10.154)
where the term 1 − κe in the denominator creates a singularity. Hence, the control law requires that the initial position of the craft must be restricted to a tube around the path with radius less than 1/κmax. A discussion on the limitation of this approach is found in Breivik and Fossen (2004a). The constraint 1 − κe =/ 0 is, however, removed by using (10.142)–(10.143) where an additional controller parameter s allows the origin of the {SF} frame to evolve along the path (Lapierre and Soetanto, 2007).
Remark 10.2
In Encarnacao et al. (2000), the ocean current velocities are included in the kinematic equations of motion together with a state estimator to obtain the optimal sideslip angle during path following. This section presents a different approach where the current velocities are modeled as physical forces, with moments in the expression for β ̇ representing the equation of motion in sway. Furthermore, the ocean currents are compensated for by using integral action in the kinematic controller to reduce sensitivity to model parameters.
Marine Craft Model for Kinematic Controller
For a conventional marine craft with no actuation in the transverse direction, the sway force can be approximated by a maneuvering model (see Section 7.1.1):
(m − Y ̇v) ̇v + mur = Y (ur, vr, r) (10.155)
where the hydrodynamic force is due to added mass and linear damping:
Y (ur, vr, r) = X ̇uurr + Yvvr + Yrr (10.156)
The relative velocities satisfy (see Section 2.4.2)
ur = u − uc (10.157)
vr = v − vc (10.158)
Since ocean currents are slowly varying and the craft speed is constant, the sway acceleration can be approximated by time differentiation of
v = U sin(β) (10.159)
under the assumptions that U ̇ = 0. This gives
 ̇v = U cos(β)β ̇ (10.160)


Path-Following for Curved Paths 281
Combining (10.155)–(10.156) and (10.160) gives
β ̇ = 1
U cos(β)  ̇v
=1
(m − Y ̇v)U cos(β) [X ̇uurr + Yvvr + Yrr − mur] (10.161)
Consequently,
β ̇ = 1
(m − Y ̇v)U cos(β) [(Yr − (m − X ̇u)U cos(β) − X ̇uuc)) r + YvU sin(β) − Yvvc] (10.162)
Kinematic Controller
The {SF} frame plays the role of the virtual target body axes and tracks the real craft. The error coordinates for control design purposes become s, e and  ̃χSF = χSF − χd which all should be driven to zero. The desired approach angle can be chosen as a function of e (Micaelli and Samson, 1993):
χd (e) = −χa
e2ke−1
e2ke+1 (10.163)
where k > 0 and 0 < χa < π/2 satisfying eχd(e) ≤ 0 for all e. An alternative approach is motivated by the LOS algorithm (10.74) (see Breivik and Fossen, 2004a, and Børhaug and Pettersen, 2006):
χd(e) = arctan
( −e )
(10.164)
where > 0 is a constant parameter. Again notice that eχd(e) ≤ 0 for all e.
Theorem 10.1 (Kinematic Path-Following Controller)
A feedback linearization controller for (10.144) (Lapierre and Soetanto, 2007)
r = χ ̇ d − β ̇ + κs ̇a − K1  ̃χSF (10.165)
s ̇a = U cos(χSF) + K2s (10.166)
where the yaw rate r and path tangential speed Ud = s ̇a are used as control variables, renders the equilibrium point (s, e,  ̃χSF) = (0, 0, 0) UGAS and ULES for K1 > 0 and K2 > 0.
Proof. Convergence and stability can be proven by noticing that the error dynamics forms a cascade of two systems. For the first system:
χ ̇ ̃SF + K1 χ ̃SF = 0 (10.167)


282 Guidance Systems
Consequently, the angle χSF → χd. For the second system in the cascade, consider the Lyapunov function candidate:
V=1
2 (s2 + e2) > 0, s =/ 0, e =/ 0 (10.168)
The time derivative of V under the assumption that χSF = χd is
V ̇ = s (U cos(χd) − (1 − κe)s ̇a) + e (U sin(χd) − κss ̇a)
= sU cos(χd) + eU sin(χd) − s (U cos(χd) + K2s)
= −K2s2 + eU sin(χd)
Exploiting the fact that the desired course angle given by (10.164) satisfies
sin(χd) = −e
√e2 + 2 (10.169)
finally gives
V ̇ = −K2s2 − U
√e2 + 2 e2
< 0, s =/ 0, e =/ 0 (10.170)
for > 0 and U > 0. Since the LFC is positive definite and radially unbounded, while its derivative with respect to time is negative, standard Lyapunov arguments for cascaded systems proves that the equilibrium point (s, e, χ ̃SF) = (0, 0, 0) is UGAS. In addition, the Jacobian of the error dynamics about the equilibrium point has strictly negative eigenvalues, which proves ULES.
Remark 10.3
A differential equation for the path variable can be derived by considering the path curvature κ( ) given by
κ( ) = |x′
d y′′
d − y′
d x′′
d|
√(x′
d
)2 + (y′
d
)2
(10.171)
where xd = xd( ) and yd = yd( ). The arc length sa satisfies
ds2
a = dx2 + dy2 (10.172)
and by dividing by d 2, this can be rewritten as
d= 1
√x′
d ( )2 + y′
d ( )2 dsa (10.173)


Path-Following for Curved Paths 283
Hence, from (10.166) it follows that
 ̇ = U cos(χSF) + K2s
√x′
d ( )2 + y′
d( )2 (10.174)
Implementation Aspects
When implementing the kinematic controller (10.165)–(10.166), an expression for β ̇ must be computed from the sway dynamics (10.162). This expression depends on the model parameters. Consider the expression
r + β ̇ = r + 1
(m − Yv ̇ )U cos(β) [(Yr − (m − X ̇u)U cos(β) − X ̇uuc)) r + YvU sin(β) − Yvvc]
=
(
1 − (m − X ̇u)
(m − Y ̇v) + Yr − X ̇uuc
(m − Y ̇v)U cos(β)
)
r + Yv
(m − Yv ̇ )
(
tan(β) − vc
U cos(β)
)
≈
(
1 − (m − X ̇u)
(m − Y ̇v)
)
r + Yv
(m − Y ̇v)
(
tan(β) − vc
U cos(β)
)
= χ ̇ d + κs ̇a − K1 χ ̃SF (10.175)
where the physical property
(m − Yv ̇ )U cos(β) Yr − X ̇uuc (10.176)
has been exploited. Solving for r = rd gives the kinematic controller
rd =
(
1 − (m − X ̇u)
(m − Y ̇v)
)−1 [
χ ̇ d + κUd − K1 χ ̃ SF − Yv
(m − Yv ̇ )
(
tan(β) − vc
U cos(β)
)]
(10.177)
Ud = U cos(χSF) + K2s (10.178)
where the desired yaw rate is denoted rd and the desired speed Ud = s ̇a is the path-tangential speed. The sideslip angle
β = arcsin
(v
U
)
(10.179)
and current velocity vc must be measured or estimated in a state observer. Alternatively, β and vc can be treated as slowly varying parameters, which can be compensated for by adding integral action. This suggests that
rd =
[
1 − (m − X ̇u)
(m − Yv ̇ )
]−1 [
χ ̇ d + κUd − 2λ  ̃χSF − λ2
∫t
0
 ̃χSF(τ)dτ
]
(10.180)


284 Guidance Systems
where λ > 0 is a constant parameter used to tune the bandwidth of the error system:
χ ̇ ̃SF + 2λ χ ̃SF + λ2
∫t
0
χ ̃SF(τ)dτ = Yv
(m − Y ̇v)
(
tan(β) − vc
U cos(β)
)
(10.181)
For a marine craft at constant course, the integral term will balance the forcing term in the steady state such that
λ2
∫t
0
χ ̃SF(τ)dτ = Yv
(m − Yv ̇ )
(
tan(β) − vc
U cos(β)
)
(10.182)
and  ̃χSF → 0.